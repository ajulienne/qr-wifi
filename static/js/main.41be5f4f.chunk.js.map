{"version":3,"sources":["components/Form/Form.jsx","actions/index.js","utils/qrcode.js","components/NetworkQrCode/NetworkQrCode.jsx","components/Summary/Summary.jsx","components/App/App.jsx","serviceWorker.js","reducers/index.js","index.jsx"],"names":["Form","state","ssid","authType","password","hidden","handleSSIDInput","e","setState","target","value","handleAuthInput","console","log","handlePasswordInput","handleHiddenInput","generate","preventDefault","props","dispatchSaveQrInfos","className","onSubmit","this","htmlFor","id","type","onChange","React","Component","mapDispatchToProps","payload","connect","createNetworkString","createQrCode","content","fileType","qr","imageSync","parser","htmlToReactParser","Parser","qrCode","style","width","height","margin","parse","Summary","downloadPdf","element","document","createElement","setAttribute","btoa","display","body","appendChild","click","removeChild","onClick","window","print","App","class","Boolean","location","hostname","match","initialState","store","createStore","action","composeWithDevTools","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41be5f4f.chunk.js","sourcesContent":["import React from \"react\";\nimport { saveQrCodeInfos } from \"../../actions\";\nimport { connect } from \"react-redux\";\n\nimport \"./Form.css\";\n\nclass Form extends React.Component {\n  state = {\n    ssid: null,\n    authType: \"WEP\",\n    password: null,\n    hidden: false\n  };\n\n  handleSSIDInput = e => {\n    this.setState({ ssid: e.target.value });\n  };\n\n  handleAuthInput = e => {\n    console.log(e.target.value);\n    this.setState({ authType: e.target.value });\n  };\n\n  handlePasswordInput = e => {\n    this.setState({ password: e.target.value });\n  };\n\n  handleHiddenInput = e => {\n    this.setState({ hidden: e.target.value });\n  };\n\n  generate = e => {\n    e.preventDefault();\n    this.props.dispatchSaveQrInfos(\n      this.state.authType,\n      this.state.ssid,\n      this.state.password,\n      this.state.hidden\n    );\n  };\n\n  render() {\n    return (\n      <form className=\"no-print uk-form-stacked\" onSubmit={this.generate}>\n        <div>\n          <label htmlFor=\"ssid\" className=\"uk-form-label\">\n            SSID\n          </label>\n          <div className=\"uk-form-controls\">\n            <input\n              id=\"ssid\"\n              className=\"uk-input\"\n              type=\"text\"\n              onChange={this.handleSSIDInput}\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"auth\" className=\"uk-form-label\">\n            Authentification type\n          </label>\n          <div className=\"uk-form-controls\">\n            <select\n              id=\"auth\"\n              onChange={this.handleAuthInput}\n              className=\"uk-select\"\n            >\n              <option value=\"WPA\">WPA/WPA2</option>\n              <option value=\"WEP\">WEP</option>\n              <option value=\"nopass\">None</option>\n            </select>\n          </div>\n        </div>\n        <div>\n          <div className=\"uk-form-controls\">\n            <label htmlFor=\"hidden\">\n              <input\n                type=\"checkbox\"\n                className=\"uk-checkbox\"\n                id=\"hidden\"\n                onChange={this.handleHiddenInput}\n              />{\" \"}\n              SSID is hidden\n            </label>\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"password\" className=\"uk-form-label\">\n            Password\n          </label>\n          <div className=\"uk-form-controls\">\n            <input\n              type=\"password\"\n              className=\"uk-input\"\n              onChange={this.handlePasswordInput}\n            />\n          </div>\n        </div>\n        <p>\n          <input\n            className=\"uk-button uk-button-default full-size\"\n            type=\"submit\"\n            value=\"Generate QR Code\"\n          />\n        </p>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  dispatchSaveQrInfos: (authType, ssid, password, hidden) =>\n    saveQrCodeInfos({ authType, ssid, password, hidden })\n};\n\nexport default connect(null, mapDispatchToProps)(Form);\n","export const SAVE_QR_CODE_INFOS = \"[QR CODE] Save infos\";\n\nexport const saveQrCodeInfos = payload => {\n  return {\n    type: SAVE_QR_CODE_INFOS,\n    payload\n  };\n};\n","import qr from \"qr-image\";\n\nexport const createNetworkString = (ssid, authType, password, hidden) => {\n  return `WIFI:T:${authType};S:${ssid};P:${password};${\n    hidden ? \"H:true\" : \"\"\n  };`;\n};\n\nexport const createQrCode = (content, fileType) => {\n  return qr.imageSync(content, {\n    type: fileType\n  });\n};\n","import React from \"react\";\nimport htmlToReactParser from \"html-to-react\";\nimport { connect } from \"react-redux\";\nimport { createQrCode, createNetworkString } from \"../../utils/qrcode\";\n\nconst NetworkQrCode = props => {\n  const parser = new htmlToReactParser.Parser();\n\n  return (\n    props.qrCode && (\n      <div style={{ width: \"300px\", height: \"300px\", margin: \"auto\" }}>\n        {parser.parse(\n          createQrCode(\n            createNetworkString(\n              props.qrCode.ssid,\n              props.qrCode.authType,\n              props.qrCode.password,\n              props.qrCode.hidden\n            ),\n            \"svg\"\n          )\n        )}\n      </div>\n    )\n  );\n};\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps)(NetworkQrCode);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport NetworkQrCode from \"../NetworkQrCode/NetworkQrCode\";\nimport { createQrCode, createNetworkString } from \"../../utils/qrcode\";\n\nclass Summary extends React.Component {\n  state = {};\n\n  /**\n   * Generate a PDF file containing the QRCode\n   */\n  downloadPdf = () => {\n    let element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:application/pdf;base64,\" +\n        btoa(\n          createQrCode(\n            createNetworkString(\n              this.props.qrCode.ssid,\n              this.props.qrCode.authType,\n              this.props.qrCode.password,\n              this.props.qrCode.hidden\n            ),\n            \"pdf\"\n          )\n        )\n    );\n    element.setAttribute(\"download\", `${this.props.qrCode.ssid}.pdf`);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  };\n\n  render() {\n    return (\n      this.props.qrCode && (\n        <div className=\"summary\">\n          <hr className=\"uk-divider-icon no-print\" />\n          <NetworkQrCode />\n          <p className=\"only-print centered\">\n            <strong>SSID:</strong> {this.props.qrCode.ssid}\n            <br />\n            <strong>Password:</strong> {this.props.qrCode.password}\n          </p>\n          <p className=\"no-print\">\n            <button\n              className=\"uk-button uk-button-default half-size\"\n              onClick={this.downloadPdf}\n            >\n              Download PDF\n            </button>\n            <button\n              className=\"uk-button uk-button-primary half-size\"\n              onClick={() => window.print()}\n            >\n              Print\n            </button>\n          </p>\n        </div>\n      )\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps)(Summary);\n","import React from \"react\";\n\nimport Form from \"../Form/Form\";\nimport Summary from \"../Summary/Summary\";\nimport \"./App.css\";\n\nconst App = props => {\n  return (\n    <div className=\"container\">\n      <h1 class=\"no-print\">Wifi QR Code generator</h1>\n      <Form />\n      <Summary />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SAVE_QR_CODE_INFOS } from \"../actions\";\n\nconst initialState = {\n  qrCode: null\n};\n\nexport const reducers = (state = initialState, action) => {\n  if (action.type === SAVE_QR_CODE_INFOS) {\n    return {\n      ...state,\n      qrCode: action.payload\n    };\n  } else {\n    return initialState;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { reducers } from \"./reducers\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(reducers, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}